<!DOCTYPE html>
<html>
<head>
  <title>Dashboard - CRM Pedidos</title>
  <script src="https://cdn.jsdelivr.net/npm/sortablejs@1.15.0/Sortable.min.js"></script>
  <link rel="stylesheet" href="/css/style.css">
  <style>
    td{
      background-color: #fff;
      padding: 5px;
      padding: 15px;
    }

    .close {
      background-color: #ff7373;
      border: none;
      border-radius: 5px;
      margin: -5px 0 14px auto;
      color: #fff;
      font-weight: bold;
      cursor: pointer;
      display: block;
      border-radius: 30px;
      width: 35px;
      height: 35px;
    }

    /* Estilos para o card melhorado */
    .card {
      background: #e8f1ff;
      margin: 5px 0;
      padding: 15px;
      border-radius: 8px;
      cursor: grab;
      font-size: 14px;
      position: relative;
    }

    .card-header {
      display: flex;
      justify-content: space-between;
      align-items: flex-start;
      margin-bottom: 8px;
    }

    .card-title {
      font-weight: bold;
      color: #333;
    }

    .card-loja {
      background: #7e30d2;
      color: white;
      padding: 2px 8px;
      border-radius: 12px;
      font-size: 11px;
      font-weight: bold;
    }

    .card-data-entrega {
      display: inline-block;
      padding: 4px 8px;
      border-radius: 12px;
      font-size: 11px;
      font-weight: bold;
      margin-top: 5px;
    }

    .data-verde { background-color: #4CAF50; color: white; }
    .data-amarela { background-color: #FF9800; color: white; }
    .data-vermelha { background-color: #f44336; color: white; }
    .data-cinza { background-color: #9e9e9e; color: white; }

    .card-itens {
      margin-top: 10px;
      border-top: 1px solid #ddd;
      padding-top: 8px;
    }

    .card-itens-toggle {
      background: #1aa5fb;
      color: white;
      border: none;
      border-radius: 4px;
      padding: 4px 8px;
      font-size: 11px;
      cursor: pointer;
      margin-bottom: 5px;
    }

    .card-itens-content {
      display: none;
      background: rgba(255,255,255,0.7);
      border-radius: 4px;
      padding: 8px;
      margin-top: 5px;
    }

    .card-item {
      font-size: 11px;
      padding: 2px 0;
      border-bottom: 1px solid #eee;
    }

    .card-item:last-child {
      border-bottom: none;
    }
  </style>
</head>
<body>
  <%- include('partials/sidebar') %>

  <div style="padding: 20px; margin-left: 210px;">
    <h2 class="title-page">Painel de Pedidos</h2>

    <div class="board">
      <% ['OrÃ§amentos', 'Pedidos', 'Arte', 'ProduÃ§Ã£o', 'ExpediÃ§Ã£o', 'Entregue'].forEach(status => { %>
        <div class="column">
          <h3><%= status %></h3>
          <div class="dropzone" data-status="<%= status %>">
            <% (porStatus[status] || []).forEach(p => { %>
              <div class="card" data-id="<%= p.id %>" onclick="abrirPopup(<%= JSON.stringify(p) %>)">
                <div class="card-header">
                  <div class="card-title">#<%= p.id %> - <%= p.nome %></div>
                  <div class="card-loja"><%= p.loja || 'N/A' %></div>
                </div>
                
                <div>
                  <small>Total: <%= p.total %></small>
                  <br />
                  <small>Pagou: R$ <%= p.pago %></small>
                </div>

                <% if (p.dataEntrega) { %>
                  <div class="card-data-entrega" data-data-entrega="<%= p.dataEntrega %>" data-status="<%= p.status %>">
                    ðŸ“… <span class="data-text"></span>
                  </div>
                <% } %>

                <div class="card-itens">
                  <button class="card-itens-toggle" onclick="toggleItens(event, '<%= p.id %>')">
                    ðŸ“‹ Mostrar Itens
                  </button>
                  <div class="card-itens-content" id="itens-<%= p.id %>">
                    <div class="card-item">Carregando itens...</div>
                  </div>
                </div>
              </div>
            <% }) %>
          </div>
        </div>
      <% }) %>
    </div>

    <div id="popup" class="popup"></div>
  </div>
  <script>
    // FunÃ§Ãµes helper para data de entrega
    function formatDataEntrega(dataString) {
      if (!dataString) return '';
      
      try {
        const data = new Date(dataString);
        if (isNaN(data.getTime())) return dataString;
        
        return data.toLocaleDateString('pt-BR');
      } catch (error) {
        return dataString;
      }
    }

    function getDataEntregaClass(dataString, status) {
      if (status === 'Entregue') return 'data-cinza';
      if (!dataString) return '';
      
      try {
        const dataEntrega = new Date(dataString);
        const hoje = new Date();
        const diffTime = dataEntrega.getTime() - hoje.getTime();
        const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
        
        if (diffDays < 0) return 'data-vermelha'; // Atrasado
        if (diffDays <= 1) return 'data-vermelha'; // 1 dia ou menos
        if (diffDays <= 3) return 'data-amarela'; // 2-3 dias
        return 'data-verde'; // Mais de 3 dias
      } catch (error) {
        return '';
      }
    }

    // Processar datas de entrega dinamicamente
    document.addEventListener('DOMContentLoaded', function() {
      const dataElements = document.querySelectorAll('.card-data-entrega');
      
      dataElements.forEach(element => {
        const dataEntrega = element.getAttribute('data-data-entrega');
        const status = element.getAttribute('data-status');
        const dataText = element.querySelector('.data-text');
        
        if (dataEntrega && dataText) {
          // Formatar a data
          const dataFormatada = formatDataEntrega(dataEntrega);
          dataText.textContent = dataFormatada;
          
          // Aplicar a classe CSS baseada na data
          const dataClass = getDataEntregaClass(dataEntrega, status);
          if (dataClass) {
            element.classList.add(dataClass);
          }
        }
      });
    });

    const zonas = document.querySelectorAll('.dropzone');
    zonas.forEach(z => {
      new Sortable(z, {
        group: 'pedidos',
        animation: 150,
        onAdd: async function (evt) {
          const card = evt.item;
          const novoStatus = evt.to.dataset.status;
          const idPedido = card.dataset.id;

          const res = await fetch('/atualizar-status', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ idPedido, novoStatus })
          });

          if (!res.ok) alert('Erro ao atualizar status.');
        }
      });
    });

    let pedidoAtual = null;

    // FunÃ§Ã£o para alternar a exibiÃ§Ã£o dos itens
    async function toggleItens(event, pedidoId) {
      event.stopPropagation(); // Evita que o clique propague para o card
      
      const itensContent = document.getElementById(`itens-${pedidoId}`);
      const toggleButton = event.target;
      
      if (itensContent.style.display === 'none' || itensContent.style.display === '') {
        // Carregar e mostrar itens
        try {
          const res = await fetch(`/itens-do-pedido?id=${pedidoId}`);
          const itens = await res.json();
          
          if (itens.length > 0) {
            itensContent.innerHTML = itens.map(item => 
              `<div class="card-item">â€¢ ${item.produto} - Qtd: ${item.qtd}</div>`
            ).join('');
          } else {
            itensContent.innerHTML = '<div class="card-item">Nenhum item encontrado</div>';
          }
          
          itensContent.style.display = 'block';
          toggleButton.textContent = 'ðŸ“‹ Ocultar Itens';
        } catch (error) {
          console.error('Erro ao carregar itens:', error);
          itensContent.innerHTML = '<div class="card-item">Erro ao carregar itens</div>';
          itensContent.style.display = 'block';
        }
      } else {
        // Ocultar itens
        itensContent.style.display = 'none';
        toggleButton.textContent = 'ðŸ“‹ Mostrar Itens';
      }
    }

    async function abrirPopup(pedido) {
      pedidoAtual = pedido;
      const popup = document.getElementById('popup');

      // Buscar itens da aba Vendas com mesmo NÂº Pedido
      const res = await fetch('/itens-do-pedido?id=' + pedido.id);
      const itens = await res.json();
      
      popup.innerHTML = `
      <button onclick="document.getElementById('popup').style.display='none'" class="buttons close">X</button>
        <div style="display: flex; justify-content: space-between;">
          <h3>Pedido #${pedido.id} - ${pedido.loja}</h3>
          <div>
            <label>Data de Entrega:</label>
            <input type="date" id="editar-data" value="${pedido.dataEntrega || ''}">
          </div>
        </div>
        <div style="display: flex; gap: 20px;">
          <div class="client">
            <p><strong>Cliente:</strong> ${pedido.nome}</p>
            <p><strong>Telefone:</strong> ${pedido.telefone}</p>
            <p><strong>Email:</strong> ${pedido.email}</p>
            <p><strong>Telefone:</strong> ${pedido.telefone}</p>
              <a href="https://wa.me/55${pedido.telefone}.replace(/\D/g, '')" target="_blank">ðŸ“² WhatsApp</a><br>
          </div>
          <div class="client">
            <p><strong>Valor Total:</strong> <span>${pedido.total}</span></p>
            <p><strong>Desconto:</strong> <span>${pedido.desconto}</span></p>
            <div>
              <label>Valor Pago: <input type="text" id="editar-pago" value="${pedido.pago.replace('R$ ','')}" style="width: 90px; font-size: 1em; text-align: right;"></label>
            </div>
            <p><strong>Valor Restante:</strong> <span>${pedido.restante}</span></p>
            
          </div>
          <div class="client">
            <label>ObservaÃ§Ã£o:</label>
            <textarea type="text" id="editar-obs" value="" style="min-height: 90px;">${pedido.observacao || ''}</textarea>
          </div>
        </div>

        <h4 class="division">Itens do Pedido</h4>
        <table id="tabela-editar-itens">
          <thead>
            <tr><th>Produto</th><th>Qtd</th><th>ObservaÃ§Ã£o</th></tr>
          </thead>
          <tbody>
            ${itens.map((item, i) => `
              <tr>
                <td>${item.produto}</td>
                <td>${item.qtd}</td>
                <td>${item.observacao}</td>
              </tr>
            `).join('')}
          </tbody>
        </table>
        
       <button onclick="salvarAlteracoes()" class="buttons">ðŸ’¾ Salvar AlteraÃ§Ãµes</button>
      `;
      popup.style.display = 'block';
    }

    async function salvarAlteracoes() {

      const payload = {
        id: pedidoAtual.id,
        pago: parseFloat(document.getElementById('editar-pago').value),
        dataEntrega: document.getElementById('editar-data').value,
        observacao: document.getElementById('editar-obs').value,
      };

      const res = await fetch('/editar-pedido', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(payload)
      });

      if (res.ok) {
        alert('Pedido atualizado!');
        location.reload();
      } else {
        alert('Erro ao salvar alteraÃ§Ãµes.');
      }
    }

  </script>
</body>
</html>
