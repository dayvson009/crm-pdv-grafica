<!DOCTYPE html>
<html>
<head>
  <title>PDV</title>
  <link rel="stylesheet" href="/css/style.css">
</head>
<body>
  <%- include('partials/sidebar') %>

  <div style="padding: 20px; margin-left: 210px;">
    <h2 class="title-page">Vendas</h2>
    <div id="modo-venda" style="display: flex; gap:20px;">
      <form action="/registrar-venda" class="form-vendas" id="form-registro-venda" method="POST">
        <div>
          <div style="display: flex;">
            <input type="radio" id="loja1" name="loja" value="loja1">
            <label for="loja1">LOJA1</label><br>
            <input type="radio" id="loja2" name="loja" value="loja2">
            <label for="loja2">LOJA2</label><br>
          </div>
          <div style="display: flex;">
            <div>
              <label>Produto:</label>
              <div class="search-container">
                <input 
                  type="text" 
                  id="produto-search" 
                  placeholder="Digite para buscar produtos..."
                  autocomplete="off"
                  style="width: 300px; padding: 8px; border: 1px solid #ddd; border-radius: 4px;"
                >
                <div id="produto-results" class="search-results" style="display: none;"></div>
                <input type="hidden" id="produto" name="produto" required>
              </div>
            </div>
            <div>
              <label>Quantidade:</label>
              <input type="number" name="quantidade" id="quantidade" value="1" min="1" required style="width: 90px;text-align: center;">
            </div>
          </div>
          <div style="display: flex;">
            <div>
              <label>Valor Pago (R$):</label>
              <input type="text" step="0.01" name="valorPago" id="valorPago" placeholder="0" style="text-align: right;max-width: 90px;">
            </div>
            <div>
              <label>Desconto (R$):</label>
              <input type="text" step="0.01" name="desconto" id="desconto" placeholder="0" style="text-align: right;max-width: 90px;">
            </div>
            <div>
              <label>Status:</label>
              <select name="status">
                <option>Entregue</option>
                <option>Expedição</option>
              </select>
            </div>
          </div>
          <div style="display: flex;">
            <div>
              <label>Forma de Pagamento:</label>
              <select name="formaPagamento">
                <option>Pendente Pagamento</option>
                <option>Cartão</option>
                <option>Dinheiro</option>
                <option>Pix</option>
              </select>
            </div>
            <div>
              <label>Observação:</label>
              <input type="text" name="observacao">
            </div>
          </div>
          <div style="display: flex; gap: 20px;">
            <button type="submit">Registrar</button>
            <button type="reset">Cancelar</button>
          </div>
        </div>
      </form>
      <div id="loading-indicator">
        <div class="spinner"></div>
        <p style="margin-left: 20px;">Processando...</p>
      </div>
      <div>
        <div class="card-value"><strong>Total</strong> <span id="total">0.00</span></div>
        <div class="card-value"><strong>Total com desconto</strong> <span id="totalComDesconto">0.00</span></div>
        <div class="card-value"><strong>Valor Restante</strong> <span id="totalApagar">0.00</span></div>
      </div>
    </div>
  </div>
  <div id="notification-container"></div>
<script>
  // --- Sistema de Autocomplete para Produtos ---
  
  // Dados dos produtos (convertidos do EJS para JavaScript) - DEVE VIR PRIMEIRO!
  const produtos = <%- JSON.stringify(produtos || []) %>;
  

  const produtoSelect = document.getElementById('produto');
  const quantidadeInput = document.getElementById('quantidade');
  const descontoInput = document.getElementById('desconto');
  const valorPagoInput = document.getElementById('valorPago');
  const totalSpan = document.getElementById('total');
  const totalComDescontoSpan = document.getElementById('totalComDesconto');
  const totalApagarSpan = document.getElementById('totalApagar');
  const notificationContainer = document.getElementById('notification-container');

  const loadingIndicator = document.getElementById('loading-indicator');
  const body = document.body; // Para aplicar o estilo de opacidade

  function calcularTotal() {
    // Buscar o produto selecionado pelo nome
    const nomeProduto = document.getElementById('produto').value;
    const produto = produtos.find(p => p.nome === nomeProduto);
    
    const preco = produto ? parseFloat(produto.preco.replace("R$ ", "").replace(",", ".")) : 0;
    const quantidade = parseInt(quantidadeInput.value) || 0;
    const desconto = parseFloat(descontoInput.value.replace(",",".")) || 0;
    const valPago = parseFloat(valorPagoInput.value.replace(",",".")) || 0;
    const total = preco * quantidade;
    const totalDescontado = total - desconto;
    const totalAPagar = totalDescontado - valPago;

    totalSpan.innerText = total.toLocaleString('pt-BR', {minimumFractionDigits: 2});
    totalComDescontoSpan.innerText = (totalDescontado >= 0 ? totalDescontado : 0).toLocaleString('pt-BR', {minimumFractionDigits: 2});
    totalApagarSpan.innerText = (totalAPagar >= 0 ? totalAPagar : 0).toLocaleString('pt-BR', {minimumFractionDigits: 2});
  }

  // Remover event listener antigo - não é mais necessário
  // produtoSelect.addEventListener('change', calcularTotal);
  quantidadeInput.addEventListener('input', calcularTotal);
  descontoInput.addEventListener('input', calcularTotal);
  valorPagoInput.addEventListener('input', calcularTotal);

  // Inicializar valores
  calcularTotal();

  // --- Funções de Controle do Loading ---
  function showLoading() {
      loadingIndicator.style.display = 'flex'; // Mostra o loading
      body.classList.add('loading'); // Adiciona a classe para opacidade e desabilitar cliques
  }

  function hideLoading() {
      loadingIndicator.style.display = 'none'; // Esconde o loading
      body.classList.remove('loading'); // Remove a classe
  }

  // --- Função para Mostrar Notificação ---
  function showNotification(message, type = 'success', duration = 3000) {
      const notification = document.createElement('div');
      notification.classList.add('notification');
      notification.textContent = message;

      if (type === 'error') {
          notification.classList.add('error');
      }

      notificationContainer.prepend(notification); // Adiciona no início para novas notificações ficarem em cima

      // Força o reflow para garantir que a transição funcione
      void notification.offsetWidth;

      notification.classList.add('show'); // Inicia a transição para mostrar

      setTimeout(() => {
          notification.classList.remove('show'); // Inicia a transição para esconder
          // Remove o elemento do DOM após a transição de saída
          notification.addEventListener('transitionend', () => {
              notification.remove();
          }, { once: true });
      }, duration);
  }

  // Envio com Ajax
  const form = document.getElementById('form-registro-venda');
  // --- Envio do Formulário via AJAX ---
    form.addEventListener('submit', async (event) => {
        event.preventDefault(); // Impede o envio padrão do formulário

        showLoading(); // MOSTRA O INDICADOR DE LOADING

        const formData = new FormData(form);
        const data = Object.fromEntries(formData.entries());

        // Adiciona o valor da loja selecionada (do radio button)
        const selectedLojaRadio = document.querySelector('input[name="loja"]:checked');
        if (selectedLojaRadio) {
            data.loja = selectedLojaRadio.value;
        } else {
            // Trate o caso em que nenhuma loja está selecionada, se necessário
            showNotification('Por favor, selecione uma loja.', 'error'); // Notificação de erro
            hideLoading(); // Esconde o loading em caso de erro de validação
            return; // Aborta o envio
        }

        // O hash de retorno não precisa ser enviado para o backend se não for usado lá
        // Mas se você quiser que o backend saiba, mantenha:
        // data.hashRetorno = window.location.hash;

        try {
            const response = await fetch('/registrar-venda', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(data)
            });

            if (response.ok) {
                const result = await response.json(); // Se o backend retornar JSON
                showNotification(result.message || 'Venda registrada com sucesso!', 'success'); // Notificação de sucesso
                form.reset(); // Limpa o formulário após o sucesso
                // O hash da URL permanecerá o mesmo devido à natureza do AJAX.
            } else {
                const errorData = await response.json();
                showNotification(errorData.message || 'Erro ao registrar Venda.', 'error'); // Notificação de erro
            }
        } catch (error) {
            console.error('Erro de rede ou no servidor:', error);
            showNotification('Erro de conexão ao registrar Venda.', 'error'); // Notificação de erro de conexão
        } finally {
            hideLoading(); // ESCONDE O INDICADOR DE LOADING SEMPRE, independentemente do sucesso/falha
        }
    });

  // Elementos do DOM
  const searchInput = document.getElementById('produto-search');
  const searchResults = document.getElementById('produto-results');
  const hiddenInput = document.getElementById('produto');

  let selectedIndex = -1;
  let filteredProducts = [];

  // Função para filtrar produtos
  function filterProducts(query) {
    if (!query.trim()) {
      return [];
    }
    
    const lowerQuery = query.toLowerCase();
    const resultados = produtos.filter(produto => 
      produto.nome.toLowerCase().includes(lowerQuery) ||
      produto.nome.toLowerCase().startsWith(lowerQuery)
    ).slice(0, 10);
    
    return resultados;
  }

  // Função para mostrar resultados
  function showResults(products) {
    if (products.length === 0) {
      searchResults.innerHTML = '<div class="search-no-results">Nenhum produto encontrado</div>';
      searchResults.style.display = 'block';
      return;
    }

    searchResults.innerHTML = products.map((produto, index) => `
      <div class="search-result-item" data-index="${index}" data-produto='${JSON.stringify(produto)}'>
        <div class="product-name">${produto.nome}</div>
        <div class="product-price">Preço: R$ ${produto.preco}</div>
      </div>
    `).join('');

    searchResults.style.display = 'block';
    selectedIndex = -1;
  }

  // Função para selecionar produto
  function selectProduct(produto) {
    searchInput.value = produto.nome;
    hiddenInput.value = produto.nome;
    searchResults.style.display = 'none';
    searchInput.classList.add('selected');
    
    // Atualizar totais
    setTimeout(() => {
      calcularTotal();
    }, 100);
  }

  // Event listeners
  searchInput.addEventListener('input', (e) => {
    const query = e.target.value;
    hiddenInput.value = query; // Atualizar campo hidden
    
    if (query.trim()) {
      filteredProducts = filterProducts(query);
      showResults(filteredProducts);
    } else {
      searchResults.style.display = 'none';
      filteredProducts = [];
    }
    
    searchInput.classList.remove('selected');
  });

  // Prevenir envio do formulário ao pressionar Enter no campo de busca
  searchInput.addEventListener('keydown', (e) => {
    if (e.key === 'Enter') {
      e.preventDefault(); // Previne envio do formulário
      
      if (selectedIndex >= 0 && filteredProducts[selectedIndex]) {
        selectProduct(filteredProducts[selectedIndex]);
      } else if (filteredProducts.length > 0) {
        // Se não há seleção, selecionar o primeiro resultado
        selectProduct(filteredProducts[0]);
      }
      return;
    }
    
    if (e.key === 'ArrowDown') {
      e.preventDefault();
      if (selectedIndex < filteredProducts.length - 1) {
        selectedIndex++;
        updateSelection();
      }
    } else if (e.key === 'ArrowUp') {
      e.preventDefault();
      if (selectedIndex > 0) {
        selectedIndex--;
        updateSelection();
      }
    } else if (e.key === 'Escape') {
      searchResults.style.display = 'none';
      selectedIndex = -1;
    }
  });

  // Função para atualizar seleção visual
  function updateSelection() {
    const items = searchResults.querySelectorAll('.search-result-item');
    items.forEach((item, index) => {
      item.classList.toggle('selected', index === selectedIndex);
    });
  }

  // Event listener para cliques nos resultados
  searchResults.addEventListener('click', (e) => {
    const item = e.target.closest('.search-result-item');
    if (item) {
      const index = parseInt(item.dataset.index);
      const produto = filteredProducts[index];
      selectProduct(produto);
    }
  });

  // Esconder resultados ao clicar fora
  document.addEventListener('click', (e) => {
    if (!searchInput.contains(e.target) && !searchResults.contains(e.target)) {
      searchResults.style.display = 'none';
      selectedIndex = -1;
    }
  });

  // Limpar seleção ao focar no campo
  searchInput.addEventListener('focus', () => {
    if (searchInput.value.trim()) {
      filteredProducts = filterProducts(searchInput.value);
      showResults(filteredProducts);
    }
  });

</script>

</body>
</html>
